name: Release

on:
    release:
        types: [published]
    workflow_dispatch:
        inputs:
            version_tag:
                description: 'NPM version tag (e.g., next, beta)'
                required: true
                type: string
                default: 'next'

env:
    DEBIAN_FRONTEND: noninteractive
    NODE_VERSION: 20.x
    NPM_REGISTRY: '//registry.npmjs.org'

permissions:
    id-token: write
    contents: write

defaults:
    run:
        shell: bash

jobs:
    release:
        name: Release
        timeout-minutes: 10
        runs-on: ubuntu-slim

        steps:
            - name: Checkout
              uses: actions/checkout@v5

            - name: Setup Node.js
              uses: actions/setup-node@v5
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  registry-url: https:${{ env.NPM_REGISTRY }}

            - name: Setup cache
              uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      ~/.npm
                  key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

            - name: Configure GIT
              run: |
                  git config --global --add safe.directory $(pwd)
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global user.name "github-actions[bot]"

            # Ensure npm 11.5.1 or later is installed for OIDC support
            - name: Update npm
              run: npm install -g npm@latest
              
            - name: Install dependencies
              run: npm install --no-audit

            - name: Determine NPM tag
              id: npm_tag
              run: |
                  if [ "${{ github.event_name }}" == "release" ] || [ "${{ inputs.version_tag }}" == "" ]; then
                      echo "tag=latest" >> $GITHUB_OUTPUT
                  else
                      echo "tag=${{ inputs.version_tag }}" >> $GITHUB_OUTPUT
                  fi

            # NOTE: Runs only for latest tag (e.g. 1.0.1)
            - name: Set version from release tag
              if: steps.npm_tag.outputs.tag == 'latest'
              run: npm version ${GITHUB_REF_NAME#v} --no-git-tag-version || echo "No version change"

            # NOTE: Runs only for non-latest tags (e.g. 1.0.1-next-a1b2c3d-1744196863)
            - name: Set version to tag + commit hash + timestamp
              if: steps.npm_tag.outputs.tag != 'latest'
              run: |
                  VERSION=$(npm pkg get version | tr -d '"')
                  TAG="${{ steps.npm_tag.outputs.tag }}"
                  COMMIT_HASH=$(echo "${{ github.sha }}" | cut -c1-7)
                  TIMESTAMP=$(date +%s)
                  npm version "${VERSION}-${TAG}-${COMMIT_HASH}-${TIMESTAMP}" --no-git-tag-version

            - name: Build
              run: npm run build

            - name: Release
              run: cd ./dist && npm publish --provenance --access public --tag=${{ steps.npm_tag.outputs.tag }}

            - name: Bump version and push it to main (only for latest tag)
              if: steps.npm_tag.outputs.tag == 'latest'
              run: |
                  npm run bump-version
                  git config --global --add safe.directory $(pwd)
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global user.name "github-actions[bot]"
                  git add package.json
                  git commit -m "Bump version" || echo "Nothing to commit"
                  git push origin HEAD:main || echo "Nothing to push"
